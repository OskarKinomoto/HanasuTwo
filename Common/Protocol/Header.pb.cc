// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Hanasu {
class HeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Header> {
} _Header_default_instance_;
class RegReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegReq> {
} _RegReq_default_instance_;
class ReqResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRes> {
} _ReqRes_default_instance_;

namespace protobuf_Header_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, login_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReq, pass_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRes, rc_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Header)},
  { 7, -1, sizeof(RegReq)},
  { 15, -1, sizeof(ReqRes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRes_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Header.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Header_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RegReq_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ReqRes_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Header_default_instance_.DefaultConstruct();
  _RegReq_default_instance_.DefaultConstruct();
  _ReqRes_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014Header.proto\022\006Hanasu\"k\n\006Header\022$\n\004type"
      "\030\001 \001(\0162\026.Hanasu.Header.MsgType\022\014\n\004text\030\002"
      " \001(\t\"-\n\007MsgType\022\010\n\004NONE\020\000\022\013\n\007REG_REQ\020\001\022\013"
      "\n\007REG_RES\020\002\"8\n\006RegReq\022\022\n\nlogin_name\030\001 \001("
      "\t\022\014\n\004nick\030\002 \001(\t\022\014\n\004pass\030\003 \001(\t\"\204\001\n\006ReqRes"
      "\022\035\n\002rc\030\001 \001(\0162\021.Hanasu.ReqRes.RC\"[\n\002RC\022\010\n"
      "\004FAIL\020\000\022\013\n\007SUCCESS\020\001\022\020\n\014NAME_EXSISTS\020\002\022\016"
      "\n\nPASS_SHORT\020\003\022\r\n\tNAME_LONG\020\004\022\r\n\tNICK_LO"
      "NG\020\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 332);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Header.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Header_2eproto

const ::google::protobuf::EnumDescriptor* Header_MsgType_descriptor() {
  protobuf_Header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Header_2eproto::file_level_enum_descriptors[0];
}
bool Header_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_MsgType Header::NONE;
const Header_MsgType Header::REG_REQ;
const Header_MsgType Header::REG_RES;
const Header_MsgType Header::MsgType_MIN;
const Header_MsgType Header::MsgType_MAX;
const int Header::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqRes_RC_descriptor() {
  protobuf_Header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Header_2eproto::file_level_enum_descriptors[1];
}
bool ReqRes_RC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqRes_RC ReqRes::FAIL;
const ReqRes_RC ReqRes::SUCCESS;
const ReqRes_RC ReqRes::NAME_EXSISTS;
const ReqRes_RC ReqRes::PASS_SHORT;
const ReqRes_RC ReqRes::NAME_LONG;
const ReqRes_RC ReqRes::NICK_LONG;
const ReqRes_RC ReqRes::RC_MIN;
const ReqRes_RC ReqRes::RC_MAX;
const int ReqRes::RC_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTypeFieldNumber;
const int Header::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Header_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hanasu.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Hanasu.Header)
}

void Header::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Hanasu.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_Header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Header_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  protobuf_Header_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Hanasu.Header)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Hanasu.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Hanasu.Header.MsgType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Hanasu::Header_MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Hanasu.Header.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Hanasu.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Hanasu.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Hanasu.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Hanasu.Header.MsgType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Hanasu.Header.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:Hanasu.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Hanasu.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Hanasu.Header.MsgType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Hanasu.Header.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Hanasu.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hanasu.Header)
  size_t total_size = 0;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .Hanasu.Header.MsgType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Hanasu.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hanasu.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Hanasu.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Hanasu.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Hanasu.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hanasu.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  text_.Swap(&other->text_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_Header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Header_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// .Hanasu.Header.MsgType type = 1;
void Header::clear_type() {
  type_ = 0;
}
::Hanasu::Header_MsgType Header::type() const {
  // @@protoc_insertion_point(field_get:Hanasu.Header.type)
  return static_cast< ::Hanasu::Header_MsgType >(type_);
}
void Header::set_type(::Hanasu::Header_MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Hanasu.Header.type)
}

// string text = 2;
void Header::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::text() const {
  // @@protoc_insertion_point(field_get:Hanasu.Header.text)
  return text_.GetNoArena();
}
void Header::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hanasu.Header.text)
}
#if LANG_CXX11
void Header::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hanasu.Header.text)
}
#endif
void Header::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hanasu.Header.text)
}
void Header::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hanasu.Header.text)
}
::std::string* Header::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:Hanasu.Header.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_text() {
  // @@protoc_insertion_point(field_release:Hanasu.Header.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Hanasu.Header.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegReq::kLoginNameFieldNumber;
const int RegReq::kNickFieldNumber;
const int RegReq::kPassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegReq::RegReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Header_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hanasu.RegReq)
}
RegReq::RegReq(const RegReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  login_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.login_name().size() > 0) {
    login_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_name_);
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick().size() > 0) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pass().size() > 0) {
    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  // @@protoc_insertion_point(copy_constructor:Hanasu.RegReq)
}

void RegReq::SharedCtor() {
  login_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RegReq::~RegReq() {
  // @@protoc_insertion_point(destructor:Hanasu.RegReq)
  SharedDtor();
}

void RegReq::SharedDtor() {
  login_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegReq::descriptor() {
  protobuf_Header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Header_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegReq& RegReq::default_instance() {
  protobuf_Header_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegReq* RegReq::New(::google::protobuf::Arena* arena) const {
  RegReq* n = new RegReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Hanasu.RegReq)
  login_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Hanasu.RegReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string login_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login_name().data(), this->login_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Hanasu.RegReq.login_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Hanasu.RegReq.nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Hanasu.RegReq.pass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Hanasu.RegReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Hanasu.RegReq)
  return false;
#undef DO_
}

void RegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Hanasu.RegReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login_name = 1;
  if (this->login_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Hanasu.RegReq.login_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login_name(), output);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Hanasu.RegReq.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick(), output);
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Hanasu.RegReq.pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass(), output);
  }

  // @@protoc_insertion_point(serialize_end:Hanasu.RegReq)
}

::google::protobuf::uint8* RegReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Hanasu.RegReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string login_name = 1;
  if (this->login_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Hanasu.RegReq.login_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login_name(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Hanasu.RegReq.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Hanasu.RegReq.pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Hanasu.RegReq)
  return target;
}

size_t RegReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hanasu.RegReq)
  size_t total_size = 0;

  // string login_name = 1;
  if (this->login_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login_name());
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  // string pass = 3;
  if (this->pass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pass());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Hanasu.RegReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RegReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hanasu.RegReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Hanasu.RegReq)
    MergeFrom(*source);
  }
}

void RegReq::MergeFrom(const RegReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Hanasu.RegReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.login_name().size() > 0) {

    login_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_name_);
  }
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.pass().size() > 0) {

    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
}

void RegReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Hanasu.RegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegReq::CopyFrom(const RegReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hanasu.RegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegReq::IsInitialized() const {
  return true;
}

void RegReq::Swap(RegReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegReq::InternalSwap(RegReq* other) {
  login_name_.Swap(&other->login_name_);
  nick_.Swap(&other->nick_);
  pass_.Swap(&other->pass_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegReq::GetMetadata() const {
  protobuf_Header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Header_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegReq

// string login_name = 1;
void RegReq::clear_login_name() {
  login_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegReq::login_name() const {
  // @@protoc_insertion_point(field_get:Hanasu.RegReq.login_name)
  return login_name_.GetNoArena();
}
void RegReq::set_login_name(const ::std::string& value) {
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hanasu.RegReq.login_name)
}
#if LANG_CXX11
void RegReq::set_login_name(::std::string&& value) {
  
  login_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hanasu.RegReq.login_name)
}
#endif
void RegReq::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hanasu.RegReq.login_name)
}
void RegReq::set_login_name(const char* value, size_t size) {
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hanasu.RegReq.login_name)
}
::std::string* RegReq::mutable_login_name() {
  
  // @@protoc_insertion_point(field_mutable:Hanasu.RegReq.login_name)
  return login_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegReq::release_login_name() {
  // @@protoc_insertion_point(field_release:Hanasu.RegReq.login_name)
  
  return login_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegReq::set_allocated_login_name(::std::string* login_name) {
  if (login_name != NULL) {
    
  } else {
    
  }
  login_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_name);
  // @@protoc_insertion_point(field_set_allocated:Hanasu.RegReq.login_name)
}

// string nick = 2;
void RegReq::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegReq::nick() const {
  // @@protoc_insertion_point(field_get:Hanasu.RegReq.nick)
  return nick_.GetNoArena();
}
void RegReq::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hanasu.RegReq.nick)
}
#if LANG_CXX11
void RegReq::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hanasu.RegReq.nick)
}
#endif
void RegReq::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hanasu.RegReq.nick)
}
void RegReq::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hanasu.RegReq.nick)
}
::std::string* RegReq::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:Hanasu.RegReq.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegReq::release_nick() {
  // @@protoc_insertion_point(field_release:Hanasu.RegReq.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegReq::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:Hanasu.RegReq.nick)
}

// string pass = 3;
void RegReq::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegReq::pass() const {
  // @@protoc_insertion_point(field_get:Hanasu.RegReq.pass)
  return pass_.GetNoArena();
}
void RegReq::set_pass(const ::std::string& value) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hanasu.RegReq.pass)
}
#if LANG_CXX11
void RegReq::set_pass(::std::string&& value) {
  
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hanasu.RegReq.pass)
}
#endif
void RegReq::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hanasu.RegReq.pass)
}
void RegReq::set_pass(const char* value, size_t size) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hanasu.RegReq.pass)
}
::std::string* RegReq::mutable_pass() {
  
  // @@protoc_insertion_point(field_mutable:Hanasu.RegReq.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegReq::release_pass() {
  // @@protoc_insertion_point(field_release:Hanasu.RegReq.pass)
  
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegReq::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    
  } else {
    
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:Hanasu.RegReq.pass)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRes::kRcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRes::ReqRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Header_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Hanasu.ReqRes)
}
ReqRes::ReqRes(const ReqRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:Hanasu.ReqRes)
}

void ReqRes::SharedCtor() {
  rc_ = 0;
  _cached_size_ = 0;
}

ReqRes::~ReqRes() {
  // @@protoc_insertion_point(destructor:Hanasu.ReqRes)
  SharedDtor();
}

void ReqRes::SharedDtor() {
}

void ReqRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRes::descriptor() {
  protobuf_Header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Header_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqRes& ReqRes::default_instance() {
  protobuf_Header_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRes* ReqRes::New(::google::protobuf::Arena* arena) const {
  ReqRes* n = new ReqRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRes::Clear() {
// @@protoc_insertion_point(message_clear_start:Hanasu.ReqRes)
  rc_ = 0;
}

bool ReqRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Hanasu.ReqRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Hanasu.ReqRes.RC rc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rc(static_cast< ::Hanasu::ReqRes_RC >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Hanasu.ReqRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Hanasu.ReqRes)
  return false;
#undef DO_
}

void ReqRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Hanasu.ReqRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Hanasu.ReqRes.RC rc = 1;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rc(), output);
  }

  // @@protoc_insertion_point(serialize_end:Hanasu.ReqRes)
}

::google::protobuf::uint8* ReqRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Hanasu.ReqRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Hanasu.ReqRes.RC rc = 1;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Hanasu.ReqRes)
  return target;
}

size_t ReqRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hanasu.ReqRes)
  size_t total_size = 0;

  // .Hanasu.ReqRes.RC rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Hanasu.ReqRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Hanasu.ReqRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Hanasu.ReqRes)
    MergeFrom(*source);
  }
}

void ReqRes::MergeFrom(const ReqRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Hanasu.ReqRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rc() != 0) {
    set_rc(from.rc());
  }
}

void ReqRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Hanasu.ReqRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRes::CopyFrom(const ReqRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hanasu.ReqRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRes::IsInitialized() const {
  return true;
}

void ReqRes::Swap(ReqRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRes::InternalSwap(ReqRes* other) {
  std::swap(rc_, other->rc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRes::GetMetadata() const {
  protobuf_Header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Header_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRes

// .Hanasu.ReqRes.RC rc = 1;
void ReqRes::clear_rc() {
  rc_ = 0;
}
::Hanasu::ReqRes_RC ReqRes::rc() const {
  // @@protoc_insertion_point(field_get:Hanasu.ReqRes.rc)
  return static_cast< ::Hanasu::ReqRes_RC >(rc_);
}
void ReqRes::set_rc(::Hanasu::ReqRes_RC value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:Hanasu.ReqRes.rc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Hanasu

// @@protoc_insertion_point(global_scope)
