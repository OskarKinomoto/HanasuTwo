// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Header.proto

#ifndef PROTOBUF_Header_2eproto__INCLUDED
#define PROTOBUF_Header_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Hanasu {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class RegReq;
class RegReqDefaultTypeInternal;
extern RegReqDefaultTypeInternal _RegReq_default_instance_;
class ReqRes;
class ReqResDefaultTypeInternal;
extern ReqResDefaultTypeInternal _ReqRes_default_instance_;
}  // namespace Hanasu

namespace Hanasu {

namespace protobuf_Header_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Header_2eproto

enum Header_MsgType {
  Header_MsgType_NONE = 0,
  Header_MsgType_REG_REQ = 1,
  Header_MsgType_REG_RES = 2,
  Header_MsgType_Header_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Header_MsgType_Header_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Header_MsgType_IsValid(int value);
const Header_MsgType Header_MsgType_MsgType_MIN = Header_MsgType_NONE;
const Header_MsgType Header_MsgType_MsgType_MAX = Header_MsgType_REG_RES;
const int Header_MsgType_MsgType_ARRAYSIZE = Header_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_MsgType_descriptor();
inline const ::std::string& Header_MsgType_Name(Header_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_MsgType_descriptor(), value);
}
inline bool Header_MsgType_Parse(
    const ::std::string& name, Header_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_MsgType>(
    Header_MsgType_descriptor(), name, value);
}
enum ReqRes_RC {
  ReqRes_RC_FAIL = 0,
  ReqRes_RC_SUCCESS = 1,
  ReqRes_RC_NAME_EXSISTS = 2,
  ReqRes_RC_PASS_SHORT = 3,
  ReqRes_RC_NAME_LONG = 4,
  ReqRes_RC_NICK_LONG = 5,
  ReqRes_RC_ReqRes_RC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqRes_RC_ReqRes_RC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReqRes_RC_IsValid(int value);
const ReqRes_RC ReqRes_RC_RC_MIN = ReqRes_RC_FAIL;
const ReqRes_RC ReqRes_RC_RC_MAX = ReqRes_RC_NICK_LONG;
const int ReqRes_RC_RC_ARRAYSIZE = ReqRes_RC_RC_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqRes_RC_descriptor();
inline const ::std::string& ReqRes_RC_Name(ReqRes_RC value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqRes_RC_descriptor(), value);
}
inline bool ReqRes_RC_Parse(
    const ::std::string& name, ReqRes_RC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqRes_RC>(
    ReqRes_RC_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Hanasu.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Header_MsgType MsgType;
  static const MsgType NONE =
    Header_MsgType_NONE;
  static const MsgType REG_REQ =
    Header_MsgType_REG_REQ;
  static const MsgType REG_RES =
    Header_MsgType_REG_RES;
  static inline bool MsgType_IsValid(int value) {
    return Header_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    Header_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    Header_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    Header_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return Header_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return Header_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return Header_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .Hanasu.Header.MsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Hanasu::Header_MsgType type() const;
  void set_type(::Hanasu::Header_MsgType value);

  // @@protoc_insertion_point(class_scope:Hanasu.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_Header_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Hanasu.RegReq) */ {
 public:
  RegReq();
  virtual ~RegReq();

  RegReq(const RegReq& from);

  inline RegReq& operator=(const RegReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegReq& default_instance();

  static inline const RegReq* internal_default_instance() {
    return reinterpret_cast<const RegReq*>(
               &_RegReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RegReq* other);

  // implements Message ----------------------------------------------

  inline RegReq* New() const PROTOBUF_FINAL { return New(NULL); }

  RegReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegReq& from);
  void MergeFrom(const RegReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string login_name = 1;
  void clear_login_name();
  static const int kLoginNameFieldNumber = 1;
  const ::std::string& login_name() const;
  void set_login_name(const ::std::string& value);
  #if LANG_CXX11
  void set_login_name(::std::string&& value);
  #endif
  void set_login_name(const char* value);
  void set_login_name(const char* value, size_t size);
  ::std::string* mutable_login_name();
  ::std::string* release_login_name();
  void set_allocated_login_name(::std::string* login_name);

  // string nick = 2;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string pass = 3;
  void clear_pass();
  static const int kPassFieldNumber = 3;
  const ::std::string& pass() const;
  void set_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_pass(::std::string&& value);
  #endif
  void set_pass(const char* value);
  void set_pass(const char* value, size_t size);
  ::std::string* mutable_pass();
  ::std::string* release_pass();
  void set_allocated_pass(::std::string* pass);

  // @@protoc_insertion_point(class_scope:Hanasu.RegReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr login_name_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr pass_;
  mutable int _cached_size_;
  friend struct protobuf_Header_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReqRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Hanasu.ReqRes) */ {
 public:
  ReqRes();
  virtual ~ReqRes();

  ReqRes(const ReqRes& from);

  inline ReqRes& operator=(const ReqRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRes& default_instance();

  static inline const ReqRes* internal_default_instance() {
    return reinterpret_cast<const ReqRes*>(
               &_ReqRes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ReqRes* other);

  // implements Message ----------------------------------------------

  inline ReqRes* New() const PROTOBUF_FINAL { return New(NULL); }

  ReqRes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReqRes& from);
  void MergeFrom(const ReqRes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReqRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReqRes_RC RC;
  static const RC FAIL =
    ReqRes_RC_FAIL;
  static const RC SUCCESS =
    ReqRes_RC_SUCCESS;
  static const RC NAME_EXSISTS =
    ReqRes_RC_NAME_EXSISTS;
  static const RC PASS_SHORT =
    ReqRes_RC_PASS_SHORT;
  static const RC NAME_LONG =
    ReqRes_RC_NAME_LONG;
  static const RC NICK_LONG =
    ReqRes_RC_NICK_LONG;
  static inline bool RC_IsValid(int value) {
    return ReqRes_RC_IsValid(value);
  }
  static const RC RC_MIN =
    ReqRes_RC_RC_MIN;
  static const RC RC_MAX =
    ReqRes_RC_RC_MAX;
  static const int RC_ARRAYSIZE =
    ReqRes_RC_RC_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RC_descriptor() {
    return ReqRes_RC_descriptor();
  }
  static inline const ::std::string& RC_Name(RC value) {
    return ReqRes_RC_Name(value);
  }
  static inline bool RC_Parse(const ::std::string& name,
      RC* value) {
    return ReqRes_RC_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Hanasu.ReqRes.RC rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  ::Hanasu::ReqRes_RC rc() const;
  void set_rc(::Hanasu::ReqRes_RC value);

  // @@protoc_insertion_point(class_scope:Hanasu.ReqRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int rc_;
  mutable int _cached_size_;
  friend struct protobuf_Header_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// .Hanasu.Header.MsgType type = 1;
inline void Header::clear_type() {
  type_ = 0;
}
inline ::Hanasu::Header_MsgType Header::type() const {
  // @@protoc_insertion_point(field_get:Hanasu.Header.type)
  return static_cast< ::Hanasu::Header_MsgType >(type_);
}
inline void Header::set_type(::Hanasu::Header_MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Hanasu.Header.type)
}

// string text = 2;
inline void Header::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::text() const {
  // @@protoc_insertion_point(field_get:Hanasu.Header.text)
  return text_.GetNoArena();
}
inline void Header::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hanasu.Header.text)
}
#if LANG_CXX11
inline void Header::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hanasu.Header.text)
}
#endif
inline void Header::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hanasu.Header.text)
}
inline void Header::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hanasu.Header.text)
}
inline ::std::string* Header::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:Hanasu.Header.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_text() {
  // @@protoc_insertion_point(field_release:Hanasu.Header.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Hanasu.Header.text)
}

// -------------------------------------------------------------------

// RegReq

// string login_name = 1;
inline void RegReq::clear_login_name() {
  login_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegReq::login_name() const {
  // @@protoc_insertion_point(field_get:Hanasu.RegReq.login_name)
  return login_name_.GetNoArena();
}
inline void RegReq::set_login_name(const ::std::string& value) {
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hanasu.RegReq.login_name)
}
#if LANG_CXX11
inline void RegReq::set_login_name(::std::string&& value) {
  
  login_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hanasu.RegReq.login_name)
}
#endif
inline void RegReq::set_login_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hanasu.RegReq.login_name)
}
inline void RegReq::set_login_name(const char* value, size_t size) {
  
  login_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hanasu.RegReq.login_name)
}
inline ::std::string* RegReq::mutable_login_name() {
  
  // @@protoc_insertion_point(field_mutable:Hanasu.RegReq.login_name)
  return login_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegReq::release_login_name() {
  // @@protoc_insertion_point(field_release:Hanasu.RegReq.login_name)
  
  return login_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegReq::set_allocated_login_name(::std::string* login_name) {
  if (login_name != NULL) {
    
  } else {
    
  }
  login_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_name);
  // @@protoc_insertion_point(field_set_allocated:Hanasu.RegReq.login_name)
}

// string nick = 2;
inline void RegReq::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegReq::nick() const {
  // @@protoc_insertion_point(field_get:Hanasu.RegReq.nick)
  return nick_.GetNoArena();
}
inline void RegReq::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hanasu.RegReq.nick)
}
#if LANG_CXX11
inline void RegReq::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hanasu.RegReq.nick)
}
#endif
inline void RegReq::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hanasu.RegReq.nick)
}
inline void RegReq::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hanasu.RegReq.nick)
}
inline ::std::string* RegReq::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:Hanasu.RegReq.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegReq::release_nick() {
  // @@protoc_insertion_point(field_release:Hanasu.RegReq.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegReq::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:Hanasu.RegReq.nick)
}

// string pass = 3;
inline void RegReq::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegReq::pass() const {
  // @@protoc_insertion_point(field_get:Hanasu.RegReq.pass)
  return pass_.GetNoArena();
}
inline void RegReq::set_pass(const ::std::string& value) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Hanasu.RegReq.pass)
}
#if LANG_CXX11
inline void RegReq::set_pass(::std::string&& value) {
  
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Hanasu.RegReq.pass)
}
#endif
inline void RegReq::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Hanasu.RegReq.pass)
}
inline void RegReq::set_pass(const char* value, size_t size) {
  
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Hanasu.RegReq.pass)
}
inline ::std::string* RegReq::mutable_pass() {
  
  // @@protoc_insertion_point(field_mutable:Hanasu.RegReq.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegReq::release_pass() {
  // @@protoc_insertion_point(field_release:Hanasu.RegReq.pass)
  
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegReq::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    
  } else {
    
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:Hanasu.RegReq.pass)
}

// -------------------------------------------------------------------

// ReqRes

// .Hanasu.ReqRes.RC rc = 1;
inline void ReqRes::clear_rc() {
  rc_ = 0;
}
inline ::Hanasu::ReqRes_RC ReqRes::rc() const {
  // @@protoc_insertion_point(field_get:Hanasu.ReqRes.rc)
  return static_cast< ::Hanasu::ReqRes_RC >(rc_);
}
inline void ReqRes::set_rc(::Hanasu::ReqRes_RC value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:Hanasu.ReqRes.rc)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Hanasu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Hanasu::Header_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hanasu::Header_MsgType>() {
  return ::Hanasu::Header_MsgType_descriptor();
}
template <> struct is_proto_enum< ::Hanasu::ReqRes_RC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hanasu::ReqRes_RC>() {
  return ::Hanasu::ReqRes_RC_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Header_2eproto__INCLUDED
